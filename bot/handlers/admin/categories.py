from __future__ import annotations

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from ...config import BOT_ADMINS
from ...keyboards import admin_main_kb
from ...database.engine import session_scope
from ...database.models import Category
from sqlalchemy import select
from ...utils.states import AdminCategoryState
from aiogram.fsm.context import FSMContext
from aiogram.types import Message


router = Router()


def _is_admin(uid: int) -> bool:
    return uid in BOT_ADMINS


@router.callback_query(lambda c: c.data == "admin:categories")
async def admin_categories(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        return await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–¥–∏–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
    async with session_scope() as session:
        # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ,
        # —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –∑–∞–Ω–æ–≤–æ.
        res = await session.execute(select(Category))
        all_cats = res.scalars().all()
        if not all_cats:
            session.add_all([
                Category(name="–ü–æ–¥–≤–∏–∂–Ω–æ–π —Å–æ—Å—Ç–∞–≤"),
                Category(name="–ö–∞—Ä—Ç—ã"),
                Category(name="–°—Ü–µ–Ω–∞—Ä–∏–∏"),
                Category(name="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"),
            ])
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async with session_scope() as session:
        res = await session.execute(select(Category).order_by(Category.id))
        cats = res.scalars().all()
    rows = [[InlineKeyboardButton(text=f"{c.name}", callback_data=f"admin:cat:edit:{c.id}")]
            for c in cats]
    rows.append([InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="home")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await cb.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è):", reply_markup=kb)
    await cb.answer()

@router.callback_query(lambda c: c.data.startswith("admin:cat:edit:"))
async def cat_edit_start(cb: CallbackQuery, state: FSMContext):
    cid = int(cb.data.split(":")[-1])
    async with session_scope() as session:
        res = await session.execute(select(Category).where(Category.id == cid))
        c = res.scalar_one_or_none()
    if not c:
        return await cb.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    await state.update_data(cid=cid, old_name=c.name)
    await state.set_state(AdminCategoryState.waiting_for_name)
    await cb.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è: {c.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin:categories")]]),
    )
    await cb.answer()


@router.message(AdminCategoryState.waiting_for_name)
async def cat_edit_enter_new(message: Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    cid = data.get("cid")
    old_name = data.get("old_name")
    await state.update_data(new_name=new_name)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin:cat:confirm:{cid}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin:categories")],
        ]
    )
    await message.answer(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å ‚Äò{old_name}‚Äô ‚Üí ‚Äò{new_name}‚Äô ?", reply_markup=kb)


@router.callback_query(lambda c: c.data.startswith("admin:cat:confirm:"))
async def cat_edit_confirm(cb: CallbackQuery, state: FSMContext):
    cid = int(cb.data.split(":")[-1])
    data = await state.get_data()
    new_name = data.get("new_name")
    if not new_name:
        return await cb.answer("–ù–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è", show_alert=True)
    async with session_scope() as session:
        res = await session.execute(select(Category).where(Category.id == cid))
        c = res.scalar_one_or_none()
        if not c:
            await state.clear()
            return await cb.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        c.name = new_name
        await session.flush()
    await state.clear()
    await admin_categories(cb)


