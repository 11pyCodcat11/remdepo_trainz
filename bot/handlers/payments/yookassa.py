from __future__ import annotations

from aiogram import Router
from aiogram.types import CallbackQuery

from ...services.payment_service import PaymentService
from ...database.engine import session_scope
from ...database.repository import OrderRepo, CartRepo, PurchaseRepo
from ...utils.helpers import safe_edit_text
# Admin notifications removed per request
from ..start import main_menu_kb  # reuse if needed
from ...config import BOT_TOKEN, TELEGRAM_PROVIDER_TOKEN


router = Router()
@router.callback_query(lambda c: c.data.startswith("order:check:"))
async def check_order(cb: CallbackQuery, db_user):
    # order:check:<order_id>:<payment_id>
    parts = cb.data.split(":")
    if len(parts) != 4:
        return await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", show_alert=True)
    try:
        _, _, oid, pid = parts
        oid = int(oid)
    except (ValueError, IndexError):
        return await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", show_alert=True)
    payment = PaymentService()
    status = await payment.check_payment(pid)
    if status == "succeeded" or status == "paid":
        async with session_scope() as session:
            repo = OrderRepo(session)
            await repo.set_status(oid, "paid", payment_id=pid)
            await PurchaseRepo(session).add_from_order(oid)
            order = await repo.get(oid)
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="orders:history")]])
        await safe_edit_text(cb.message, f"üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ó–∞–∫–∞–∑ #{oid}\n–°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n\n–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.", reply_markup=kb)
        return await cb.answer("–û–ø–ª–∞—á–µ–Ω–æ", show_alert=True)
    await cb.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", show_alert=True)

@router.callback_query(lambda c: c.data == "order:create")
async def create_order(cb: CallbackQuery, db_user):
    async with session_scope() as session:
        # Convert cart into order
        items_in_cart = await CartRepo(session).list_items(db_user.id)
        if not items_in_cart:
            return await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        order = await OrderRepo(session).create_from_cart(db_user.id, items_in_cart)
        await CartRepo(session).clear(db_user.id)
    # Prefer Telegram Payments if provider token is set and user has email
    if TELEGRAM_PROVIDER_TOKEN and db_user.email:
        from aiogram.types import LabeledPrice
        amount_kop = int((order.total_amount * 100).to_integral_value())
        title = f"–ö–æ—Ä–∑–∏–Ω–∞ #{order.id}"
        description = "–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
        prices = [LabeledPrice(label="–ö –æ–ø–ª–∞—Ç–µ", amount=amount_kop)]
        
        # Provider data for YooKassa receipt
        provider_data = {
            "receipt": {
                "customer": {
                    "email": db_user.email
                },
                "items": [
                    {
                        "description": f"–¢–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã #{order.id}",
                        "quantity": 1,
                        "amount": {
                            "value": str(order.total_amount),
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_mode": "full_payment",
                        "payment_subject": "commodity"
                    }
                ],
                "tax_system_code": 1
            }
        }
        
        try:
            await cb.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        await cb.message.answer_invoice(
            title=title,
            description=description,
            payload=f"order:{order.id}:product:0",
            provider_token=TELEGRAM_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="remdepo",
            provider_data=provider_data
        )
        return await cb.answer()
    
    # Check if user has email for Telegram Payments
    if not db_user.email:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å email", callback_data="profile:settings")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:open")],
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="home")],
        ])
        await safe_edit_text(cb.message, 
            "üìß <b>–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram –Ω—É–∂–µ–Ω email!</b>\n\n"
            "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ–±–∞–≤—å—Ç–µ email.",
            reply_markup=kb
        )
        return await cb.answer("–ù—É–∂–µ–Ω email –¥–ª—è –æ–ø–ª–∞—Ç—ã", show_alert=True)
    
    # Otherwise create external payment
    payment = PaymentService()
    pid, url = await payment.create_payment(order.id, str(order.total_amount), f"Order #{order.id}", return_url="https://t.me")
    if url:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)], [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"order:check:{order.id}:{pid}")]])
        await safe_edit_text(cb.message, f"–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –ó–∞–∫–∞–∑ #{order.id}\n–°—É–º–º–∞: {order.total_amount} ‚ÇΩ", reply_markup=kb)
        return await cb.answer()
    # Fallback test: mark as paid
    async with session_scope() as session:
        repo = OrderRepo(session)
        await repo.set_status(order.id, "paid", payment_id=pid)
        await PurchaseRepo(session).add_from_order(order.id)
        order = await repo.get(order.id)
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="orders:history")]])
    await safe_edit_text(cb.message, f"üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç–µ—Å—Ç)!\n\n–ó–∞–∫–∞–∑ #{order.id}\n–°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n\n–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.", reply_markup=kb)
    await cb.answer()


